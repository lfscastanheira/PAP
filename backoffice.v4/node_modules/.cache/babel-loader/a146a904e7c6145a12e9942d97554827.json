{"ast":null,"code":"const URL_BACK = \"http://localhost:9081\";\nasync function fetchDataFromBackend(endpoint) {\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n  let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  try {\n    const options = {\n      method,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    if (body) {\n      options.body = JSON.stringify(body);\n    }\n    const response = await fetch(`${URL_BACK}${endpoint}`, options);\n    if (!response.ok) {\n      throw new Error(`Erro ao buscar dados do backend: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Erro ao buscar dados do backend:', error);\n    throw error;\n  }\n}\n\n// Função para fazer login\nexport async function login(userOrEmail, password) {\n  try {\n    const result = await fetchDataFromBackend('/login', 'POST', {\n      userOrEmail,\n      password\n    });\n    return result;\n  } catch (error) {\n    throw error;\n  }\n}","map":{"version":3,"names":["URL_BACK","fetchDataFromBackend","endpoint","method","arguments","length","undefined","body","options","headers","JSON","stringify","response","fetch","ok","Error","statusText","data","json","error","console","login","userOrEmail","password","result"],"sources":["/Users/enzogrigorio/Desktop/fct/etrainit/backoffice.v3/src/api/nova.js"],"sourcesContent":["const URL_BACK = \"http://localhost:9081\";\n\n\n\nasync function fetchDataFromBackend(endpoint, method = 'GET', body = null) {\n    try {\n        const options = {\n            method,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n\n        if (body) {\n            options.body = JSON.stringify(body);\n        }\n\n        const response = await fetch(`${URL_BACK}${endpoint}`, options);\n        \n        if (!response.ok) {\n            throw new Error(`Erro ao buscar dados do backend: ${response.statusText}`);\n        }\n        \n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Erro ao buscar dados do backend:', error);\n        throw error;\n    }\n}\n\n// Função para fazer login\nexport async function login(userOrEmail, password) {\n    try {\n        const result = await fetchDataFromBackend('/login', 'POST', { userOrEmail, password });\n        return result;\n    } catch (error) {\n        throw error;\n    }\n}\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB;AAIxC,eAAeC,oBAAoBA,CAACC,QAAQ,EAA+B;EAAA,IAA7BC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAAA,IAAEG,IAAI,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACrE,IAAI;IACA,MAAMI,OAAO,GAAG;MACZL,MAAM;MACNM,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC;IAED,IAAIF,IAAI,EAAE;MACNC,OAAO,CAACD,IAAI,GAAGG,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC;IACvC;IAEA,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEb,QAAS,GAAEE,QAAS,EAAC,EAAEM,OAAO,CAAC;IAE/D,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,oCAAmCH,QAAQ,CAACI,UAAW,EAAC,CAAC;IAC9E;IAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;IAClC,OAAOD,IAAI;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACf;AACJ;;AAEA;AACA,OAAO,eAAeE,KAAKA,CAACC,WAAW,EAAEC,QAAQ,EAAE;EAC/C,IAAI;IACA,MAAMC,MAAM,GAAG,MAAMvB,oBAAoB,CAAC,QAAQ,EAAE,MAAM,EAAE;MAAEqB,WAAW;MAAEC;IAAS,CAAC,CAAC;IACtF,OAAOC,MAAM;EACjB,CAAC,CAAC,OAAOL,KAAK,EAAE;IACZ,MAAMA,KAAK;EACf;AACJ"},"metadata":{},"sourceType":"module"}