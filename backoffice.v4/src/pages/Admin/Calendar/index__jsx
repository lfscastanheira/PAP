import styled from "styled-components";
import React, { useState, useRef, useEffect } from "react";
import ReactAsync from "react-select/async";
import {
	DayPilot,
	DayPilotCalendar,
	DayPilotNavigator,
} from "@daypilot/daypilot-lite-react";
import "./CalendarStyles.css";

const Container = styled.div`
	display: flex;
	flex-direction: column;
	background-color: #fff;
	border-radius: 10px;
	padding: 1rem;
	height: 100%;
	overflow-y: auto;
`;

const Select = styled(ReactAsync)`
	width: 50%;
	margin-bottom: 2rem;
	.css-13cymwt-control,
	.css-t3ipsp-control {
		border: 2px solid ${(props) => props.theme.colors.background};
		border-radius: 0.5rem;
	}
	.css-13cymwt-control:hover,
	.css-t3ipsp-control:hover {
		border-color: ${(props) => props.theme.colors.secundary};
		cursor: pointer;
	}
	.css-t3ipsp-control {
		box-shadow: none;
	}
`;

const styles = {
	wrap: {
		display: "flex",
	},
	left: {
		marginRight: "10px",
	},
	main: {
		flexGrow: "1",
	},
};

const Calendar = () => {
	const Options = [
		{
			value: "blues",
			label: "Curso 1",
		},
		{ value: "rock", label: "Curso 2" },
		{ value: "jazz", label: "Curso 3" },
		{ value: "orchestra", label: "Curso 4" },
	];

	const filterColors = (inputValue) => {
		return Options.filter((i) =>
			i.label.toLowerCase().includes(inputValue.toLowerCase())
		);
	};

	const loadOptions = (inputValue, callback) => {
		setTimeout(() => {
			callback(filterColors(inputValue));
		}, 500);
	};

	const calendarRef = useRef();
	const [calendarConfig, setCalendarConfig] = useState({
		viewType: "Month",
		durationBarVisible: false,
		timeRangeSelectedHandling: "Enabled",
		onTimeRangeSelected: async (args) => {
			const dp = calendarRef.current.control;
			const modal = await DayPilot.Modal.prompt(
				"Create a new event:",
				"Event 1"
			);
			dp.clearSelection();
			if (!modal.result) {
				return;
			}
			dp.events.add({
				start: args.start,
				end: args.end,
				id: DayPilot.guid(),
				text: modal.result,
			});
		},
		eventDeleteHandling: "Update",
		onEventClick: async (args) => {
			const dp = calendarRef.current.control;
			const modal = await DayPilot.Modal.prompt(
				"Update event text:",
				args.e.text()
			);
			if (!modal.result) {
				return;
			}
			const e = args.e;
			e.data.text = modal.result;
			dp.events.update(e);
		},
	});

	useEffect(() => {
		const events = [
			{
				id: 1,
				text: "Event 1",
				start: "2023-10-02T10:30:00",
				end: "2023-10-02T13:00:00",
				backColor: "#2e78d6",
			},
			{
				id: 2,
				text: "Event 2",
				start: "2023-10-03T09:30:00",
				end: "2023-10-03T11:30:00",
				backColor: "#6aa84f",
			},
			{
				id: 3,
				text: "Event 3",
				start: "2023-10-03T12:00:00",
				end: "2023-10-03T15:00:00",
				backColor: "#f1c232",
			},
			{
				id: 4,
				text: "Event 4",
				start: "2023-10-01T11:30:00",
				end: "2023-10-01T14:30:00",
				backColor: "#cc4125",
			},
		];

		const startDate = "2023-10-02";

		calendarRef.current.control.update({ startDate, events });
	}, []);

	return (
		<>
			<Container>
				<Select
					loadOptions={loadOptions}
					defaultOptions
					defaultValue={Options[0]}
				/>
				<div style={styles.wrap}>
					<div style={styles.left}>
						<DayPilotNavigator
							selectMode={"Week"}
							showMonths={1}
							skipMonths={1}
							startDate={"2023-10-02"}
							selectionDay={"2023-10-02"}
							onTimeRangeSelected={(args) => {
								calendarRef.current.control.update({
									startDate: args.day,
								});
							}}
						/>
					</div>
					<div style={styles.main}>
						<DayPilotCalendar {...calendarConfig} ref={calendarRef} />
					</div>
				</div>
			</Container>
		</>
	);
};

export default Calendar;
